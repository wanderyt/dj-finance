{"version":3,"sources":["module/spinner/Spinner.svg","module/navigator/index.js","module/global-header/index.js","module/spinner/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","navigationItems","name","link","Navigator","props","react_default","a","createElement","className","map","item","react_router_dom","to","style","textDecoration","GlobalHeader","src_module_navigator","Spinner","src","spinner","alt","width","Activities","lazy","e","then","bind","Charts","Promise","all","Weather","Wheather","src_routes","react","fallback","react_router","exact","path","component","App","module_global_header","classNames","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gSCKlCC,SAAkB,CAAC,CACvBC,KAAM,uCACNC,KAAM,eACL,CACDD,KAAM,eACNC,KAAM,aAmCOC,EApBG,SAACC,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEXR,EAAgBS,IAAI,SAAAC,GAAI,OACtBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,GAAIF,EAAKR,KACTW,MAAO,CAACC,eAAgB,SACxBT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAA0BE,EAAKT,aCpBhDc,SAVM,SAACX,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACS,EAAD,kCCEOC,EARC,SAACb,GACf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAASC,IAAI,UAAUP,MAAO,CAACQ,MAAO,YCChDC,SAAaC,eAAK,kBAAMzB,EAAA0B,EAAA,GAAAC,KAAA3B,EAAA4B,KAAA,aACxBC,EAASJ,eAAK,kBAAMK,QAAAC,IAAA,CAAA/B,EAAA0B,EAAA,IAAA1B,EAAA0B,EAAA,KAAAC,KAAA3B,EAAA4B,KAAA,YAGpBI,GAFaP,eAAK,kBAAMzB,EAAA0B,EAAA,GAAAC,KAAA3B,EAAA4B,KAAA,YACHH,eAAK,kBAAMzB,EAAA0B,EAAA,GAAAC,KAAA3B,EAAA4B,KAAA,YACtBH,eAAK,kBAAMK,QAAAC,IAAA,CAAA/B,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,KAAAC,KAAA3B,EAAA4B,KAAA,aACrBK,EAAWR,eAAK,kBAAMzB,EAAA0B,EAAA,GAAAC,KAAA3B,EAAA4B,KAAA,YAEbM,EAAA,SAAC5B,GAAD,OACbC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAA,SAAD,CACEC,SACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACY,EAAD,QAIJd,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWhB,IACxCjB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWhB,IACrCjB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWX,IAGjCtB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWR,IAClCzB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWP,OCN1BQ,mLAhBX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,MAEAnC,EAAAC,EAAAC,cAAA,OAAKkC,WAAW,UACdpC,EAAAC,EAAAC,cAACyB,EAAD,iBATIU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.6c365fb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner.547e7245.svg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport './index.scss';\n\nconst navigationItems = [{\n  name: '查看所有记录',\n  link: '/activities'\n}, {\n  name: '图表',\n  link: '/charts'\n// }, {\n//   name: '图片',\n//   link: '/testImages'\n// }, {\n//   name: '图片延迟',\n//   link: '/testImagesLazyload'\n// }, {\n//   name: '天气',\n//   link: '/weather'\n// }, {\n//   name: '天气2',\n//   link: '/wheather'\n}];\n\nconst Navigator = (props) => {\n  return (\n    <div className=\"Navigator\">\n      <div className=\"Navigator__Items\">\n        {\n          navigationItems.map(item => (\n            <div className=\"Navigator__Item\">\n              <Link\n                to={item.link}\n                style={{textDecoration: 'none'}}>\n                <span className=\"Navigator__Item__Title\">{item.name}</span>\n              </Link>\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default Navigator;\n","import React from 'react';\nimport Navigator from '../navigator';\n\nimport './index.scss';\n\nconst GlobalHeader = (props) => {\n  return (\n    <div className='GlobalHeader'>\n      <div className='GlobalHeader__Navigator'>\n        <Navigator />\n      </div>\n    </div>\n  )\n};\n\nexport default GlobalHeader;\n","import React from 'react';\nimport spinner from './Spinner.svg'\n\nconst Spinner = (props) => {\n  return (\n    <div>\n      <img src={spinner} alt=\"Spinner\" style={{width: '100%'}}/>\n    </div>\n  )\n};\n\nexport default Spinner;\n","import React, {Suspense, lazy} from 'react';\nimport {Route} from 'react-router-dom';\n\nimport Spinner from './module/spinner';\n\nimport './routes.scss';\n\nconst Activities = lazy(() => import(/* webpackChunkName: \"page-activities\" */ './page/activities/index'));\nconst Charts = lazy(() => import(/* webpackChunkName: \"page-charts\" */ './page/charts'));\nconst TestImages = lazy(() => import(/* webpackChunkName: \"page-testImages\" */ './page/testImages'));\nconst TestImagesLazyload = lazy(() => import(/* webpackChunkName: \"page-testImagesLazyload\" */ './page/testImagesLazyload'));\nconst Weather = lazy(() => import(/* webpackChunkName: \"page-weather\" */ './page/weather'));\nconst Wheather = lazy(() => import(/* webpackChunkName: \"page-wheather\" */ './page/weather/wheather'));\n\nexport default (props) => (\n  <div>\n    <Suspense\n      fallback={\n        <div className='LoadingProgress'>\n          <Spinner />\n        </div>\n      }>\n      {/* React routers settings */}\n      <Route exact={true} path=\"/\" component={Activities}></Route>\n      <Route path=\"/activities\" component={Activities}></Route>\n      <Route path=\"/charts\" component={Charts}></Route>\n      {/* <Route path=\"/testImages\" component={TestImages}></Route>\n      <Route path=\"/testImagesLazyload\" component={TestImagesLazyload}></Route> */}\n      <Route path=\"/weather\" component={Weather}></Route>\n      <Route path=\"/wheather\" component={Wheather}></Route>\n    </Suspense>\n  </div>\n);","import React, {Component} from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport GlobalHeader from './module/global-header';\nimport Routes from './routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <div>\n            <GlobalHeader />\n\n            <div classNames=\"Routes\">\n              <Routes />\n            </div>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}